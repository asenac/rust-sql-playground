run
filter_merge_1
----
----
[2] Filter [gt(ref_2, ref_3)]
    - Num Columns: 10
    - Row Type: string, string, string, string, string, string, string, string, string, string
    - Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1)
  [1] Filter [eq(ref_0, ref_1)]
      - Num Columns: 10
      - Row Type: string, string, string, string, string, string, string, string, string, string
      - Pulled Up Predicates: eq(ref_0, ref_1)
    [0] TableScan id: 0, num_columns: 10
        - Num Columns: 10
        - Row Type: string, string, string, string, string, string, string, string, string, string


Optimized:
[3] Filter [gt(ref_2, ref_3), eq(ref_0, ref_1)]
    - Num Columns: 10
    - Row Type: string, string, string, string, string, string, string, string, string, string
    - Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1)
  [0] TableScan id: 0, num_columns: 10
      - Num Columns: 10
      - Row Type: string, string, string, string, string, string, string, string, string, string

initial {"nodes":[{"id":"2","label":"[2] Filter [gt(ref_2, ref_3)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1)"]},{"id":"1","label":"[1] Filter [eq(ref_0, ref_1)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: eq(ref_0, ref_1)"]},{"id":"0","label":"[0] TableScan id: 0, num_columns: 10","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string"]}],"edges":[{"from":"2","to":"1","label":"input 0"},{"from":"1","to":"0","label":"input 0"}]}
step FilterMergeRule {"nodes":[{"id":"2","label":"[2] Filter [gt(ref_2, ref_3)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1)"]},{"id":"1","label":"[1] Filter [eq(ref_0, ref_1)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: eq(ref_0, ref_1)"]},{"id":"0","label":"[0] TableScan id: 0, num_columns: 10","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string"]},{"id":"3","label":"[3] Filter [gt(ref_2, ref_3), eq(ref_0, ref_1)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1)"]}],"edges":[{"from":"2","to":"1","label":"input 0"},{"from":"1","to":"0","label":"input 0"},{"from":"3","to":"0","label":"input 0"},{"from":"2","to":"3","label":"FilterMergeRule"}]}
final {"nodes":[{"id":"3","label":"[3] Filter [gt(ref_2, ref_3), eq(ref_0, ref_1)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1)"]},{"id":"0","label":"[0] TableScan id: 0, num_columns: 10","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string"]}],"edges":[{"from":"3","to":"0","label":"input 0"}]}
----
----

run
filter_merge_2
----
----
[3] Filter [lt(ref_4, ref_5)]
    - Num Columns: 10
    - Row Type: string, string, string, string, string, string, string, string, string, string
    - Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1), lt(ref_4, ref_5)
  [2] Filter [gt(ref_2, ref_3)]
      - Num Columns: 10
      - Row Type: string, string, string, string, string, string, string, string, string, string
      - Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1)
    [1] Filter [eq(ref_0, ref_1)]
        - Num Columns: 10
        - Row Type: string, string, string, string, string, string, string, string, string, string
        - Pulled Up Predicates: eq(ref_0, ref_1)
      [0] TableScan id: 0, num_columns: 10
          - Num Columns: 10
          - Row Type: string, string, string, string, string, string, string, string, string, string


Optimized:
[5] Filter [lt(ref_4, ref_5), gt(ref_2, ref_3), eq(ref_0, ref_1)]
    - Num Columns: 10
    - Row Type: string, string, string, string, string, string, string, string, string, string
    - Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1), lt(ref_4, ref_5)
  [0] TableScan id: 0, num_columns: 10
      - Num Columns: 10
      - Row Type: string, string, string, string, string, string, string, string, string, string

initial {"nodes":[{"id":"3","label":"[3] Filter [lt(ref_4, ref_5)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1), lt(ref_4, ref_5)"]},{"id":"2","label":"[2] Filter [gt(ref_2, ref_3)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1)"]},{"id":"1","label":"[1] Filter [eq(ref_0, ref_1)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: eq(ref_0, ref_1)"]},{"id":"0","label":"[0] TableScan id: 0, num_columns: 10","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string"]}],"edges":[{"from":"3","to":"2","label":"input 0"},{"from":"2","to":"1","label":"input 0"},{"from":"1","to":"0","label":"input 0"}]}
step FilterMergeRule {"nodes":[{"id":"3","label":"[3] Filter [lt(ref_4, ref_5)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1), lt(ref_4, ref_5)"]},{"id":"2","label":"[2] Filter [gt(ref_2, ref_3)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1)"]},{"id":"1","label":"[1] Filter [eq(ref_0, ref_1)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: eq(ref_0, ref_1)"]},{"id":"0","label":"[0] TableScan id: 0, num_columns: 10","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string"]},{"id":"4","label":"[4] Filter [lt(ref_4, ref_5), gt(ref_2, ref_3)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1), lt(ref_4, ref_5)"]}],"edges":[{"from":"3","to":"2","label":"input 0"},{"from":"2","to":"1","label":"input 0"},{"from":"1","to":"0","label":"input 0"},{"from":"4","to":"1","label":"input 0"},{"from":"3","to":"4","label":"FilterMergeRule"}]}
step FilterMergeRule {"nodes":[{"id":"4","label":"[4] Filter [lt(ref_4, ref_5), gt(ref_2, ref_3)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1), lt(ref_4, ref_5)"]},{"id":"1","label":"[1] Filter [eq(ref_0, ref_1)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: eq(ref_0, ref_1)"]},{"id":"0","label":"[0] TableScan id: 0, num_columns: 10","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string"]},{"id":"5","label":"[5] Filter [lt(ref_4, ref_5), gt(ref_2, ref_3), eq(ref_0, ref_1)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1), lt(ref_4, ref_5)"]}],"edges":[{"from":"4","to":"1","label":"input 0"},{"from":"1","to":"0","label":"input 0"},{"from":"5","to":"0","label":"input 0"},{"from":"4","to":"5","label":"FilterMergeRule"}]}
final {"nodes":[{"id":"5","label":"[5] Filter [lt(ref_4, ref_5), gt(ref_2, ref_3), eq(ref_0, ref_1)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1), lt(ref_4, ref_5)"]},{"id":"0","label":"[0] TableScan id: 0, num_columns: 10","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string"]}],"edges":[{"from":"5","to":"0","label":"input 0"}]}
----
----

run rules=(FilterMergeRule)
filter_merge_2
----
----
[3] Filter [lt(ref_4, ref_5)]
    - Num Columns: 10
    - Row Type: string, string, string, string, string, string, string, string, string, string
    - Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1), lt(ref_4, ref_5)
  [2] Filter [gt(ref_2, ref_3)]
      - Num Columns: 10
      - Row Type: string, string, string, string, string, string, string, string, string, string
      - Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1)
    [1] Filter [eq(ref_0, ref_1)]
        - Num Columns: 10
        - Row Type: string, string, string, string, string, string, string, string, string, string
        - Pulled Up Predicates: eq(ref_0, ref_1)
      [0] TableScan id: 0, num_columns: 10
          - Num Columns: 10
          - Row Type: string, string, string, string, string, string, string, string, string, string


Optimized:
[5] Filter [lt(ref_4, ref_5), gt(ref_2, ref_3), eq(ref_0, ref_1)]
    - Num Columns: 10
    - Row Type: string, string, string, string, string, string, string, string, string, string
    - Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1), lt(ref_4, ref_5)
  [0] TableScan id: 0, num_columns: 10
      - Num Columns: 10
      - Row Type: string, string, string, string, string, string, string, string, string, string

initial {"nodes":[{"id":"3","label":"[3] Filter [lt(ref_4, ref_5)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1), lt(ref_4, ref_5)"]},{"id":"2","label":"[2] Filter [gt(ref_2, ref_3)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1)"]},{"id":"1","label":"[1] Filter [eq(ref_0, ref_1)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: eq(ref_0, ref_1)"]},{"id":"0","label":"[0] TableScan id: 0, num_columns: 10","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string"]}],"edges":[{"from":"3","to":"2","label":"input 0"},{"from":"2","to":"1","label":"input 0"},{"from":"1","to":"0","label":"input 0"}]}
step FilterMergeRule {"nodes":[{"id":"3","label":"[3] Filter [lt(ref_4, ref_5)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1), lt(ref_4, ref_5)"]},{"id":"2","label":"[2] Filter [gt(ref_2, ref_3)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1)"]},{"id":"1","label":"[1] Filter [eq(ref_0, ref_1)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: eq(ref_0, ref_1)"]},{"id":"0","label":"[0] TableScan id: 0, num_columns: 10","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string"]},{"id":"4","label":"[4] Filter [lt(ref_4, ref_5), gt(ref_2, ref_3)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1), lt(ref_4, ref_5)"]}],"edges":[{"from":"3","to":"2","label":"input 0"},{"from":"2","to":"1","label":"input 0"},{"from":"1","to":"0","label":"input 0"},{"from":"4","to":"1","label":"input 0"},{"from":"3","to":"4","label":"FilterMergeRule"}]}
step FilterMergeRule {"nodes":[{"id":"4","label":"[4] Filter [lt(ref_4, ref_5), gt(ref_2, ref_3)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1), lt(ref_4, ref_5)"]},{"id":"1","label":"[1] Filter [eq(ref_0, ref_1)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: eq(ref_0, ref_1)"]},{"id":"0","label":"[0] TableScan id: 0, num_columns: 10","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string"]},{"id":"5","label":"[5] Filter [lt(ref_4, ref_5), gt(ref_2, ref_3), eq(ref_0, ref_1)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1), lt(ref_4, ref_5)"]}],"edges":[{"from":"4","to":"1","label":"input 0"},{"from":"1","to":"0","label":"input 0"},{"from":"5","to":"0","label":"input 0"},{"from":"4","to":"5","label":"FilterMergeRule"}]}
final {"nodes":[{"id":"5","label":"[5] Filter [lt(ref_4, ref_5), gt(ref_2, ref_3), eq(ref_0, ref_1)]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: gt(ref_2, ref_3), eq(ref_0, ref_1), lt(ref_4, ref_5)"]},{"id":"0","label":"[0] TableScan id: 0, num_columns: 10","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string"]}],"edges":[{"from":"5","to":"0","label":"input 0"}]}
----
----

run
mergeable_filters
----
----
[4] Project [ref_0, ref_2]
    - Num Columns: 2
    - Row Type: string, string
    - Pulled Up Predicates: eq(ref_0, 'hello')
  [3] Project [ref_0, ref_9, concat(ref_2, ref_4)]
      - Num Columns: 3
      - Row Type: string, string, string
      - Pulled Up Predicates: eq(ref_0, 'hello')
    [2] Filter [eq(ref_5, 'world')]
        - Num Columns: 10
        - Row Type: string, string, string, string, string, string, string, string, string, string
        - Pulled Up Predicates: eq(ref_0, 'hello'), eq(ref_5, 'world')
      [1] Filter [eq(ref_0, 'hello')]
          - Num Columns: 10
          - Row Type: string, string, string, string, string, string, string, string, string, string
          - Pulled Up Predicates: eq(ref_0, 'hello')
        [0] TableScan id: 1, num_columns: 10
            - Num Columns: 10
            - Row Type: string, string, string, string, string, string, string, string, string, string


Optimized:
[6] Project ['hello', concat(ref_2, ref_4)]
    - Num Columns: 2
    - Row Type: string, string
    - Pulled Up Predicates: raw_eq(ref_0, 'hello')
  [7] Filter [eq(ref_5, 'world'), eq(ref_0, 'hello')]
      - Num Columns: 10
      - Row Type: string, string, string, string, string, string, string, string, string, string
      - Pulled Up Predicates: eq(ref_0, 'hello'), eq(ref_5, 'world')
    [0] TableScan id: 1, num_columns: 10
        - Num Columns: 10
        - Row Type: string, string, string, string, string, string, string, string, string, string

initial {"nodes":[{"id":"4","label":"[4] Project [ref_0, ref_2]","annotations":["Num Columns: 2","Row Type: string, string","Pulled Up Predicates: eq(ref_0, 'hello')"]},{"id":"3","label":"[3] Project [ref_0, ref_9, concat(ref_2, ref_4)]","annotations":["Num Columns: 3","Row Type: string, string, string","Pulled Up Predicates: eq(ref_0, 'hello')"]},{"id":"2","label":"[2] Filter [eq(ref_5, 'world')]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: eq(ref_0, 'hello'), eq(ref_5, 'world')"]},{"id":"1","label":"[1] Filter [eq(ref_0, 'hello')]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: eq(ref_0, 'hello')"]},{"id":"0","label":"[0] TableScan id: 1, num_columns: 10","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string"]}],"edges":[{"from":"4","to":"3","label":"input 0"},{"from":"3","to":"2","label":"input 0"},{"from":"2","to":"1","label":"input 0"},{"from":"1","to":"0","label":"input 0"}]}
step ProjectMergeRule {"nodes":[{"id":"4","label":"[4] Project [ref_0, ref_2]","annotations":["Num Columns: 2","Row Type: string, string","Pulled Up Predicates: eq(ref_0, 'hello')"]},{"id":"3","label":"[3] Project [ref_0, ref_9, concat(ref_2, ref_4)]","annotations":["Num Columns: 3","Row Type: string, string, string","Pulled Up Predicates: eq(ref_0, 'hello')"]},{"id":"2","label":"[2] Filter [eq(ref_5, 'world')]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: eq(ref_0, 'hello'), eq(ref_5, 'world')"]},{"id":"1","label":"[1] Filter [eq(ref_0, 'hello')]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: eq(ref_0, 'hello')"]},{"id":"0","label":"[0] TableScan id: 1, num_columns: 10","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string"]},{"id":"5","label":"[5] Project [ref_0, concat(ref_2, ref_4)]","annotations":["Num Columns: 2","Row Type: string, string","Pulled Up Predicates: eq(ref_0, 'hello')"]}],"edges":[{"from":"4","to":"3","label":"input 0"},{"from":"3","to":"2","label":"input 0"},{"from":"2","to":"1","label":"input 0"},{"from":"1","to":"0","label":"input 0"},{"from":"5","to":"2","label":"input 0"},{"from":"4","to":"5","label":"ProjectMergeRule"}]}
step ProjectNormalizationRule {"nodes":[{"id":"5","label":"[5] Project [ref_0, concat(ref_2, ref_4)]","annotations":["Num Columns: 2","Row Type: string, string","Pulled Up Predicates: eq(ref_0, 'hello')"]},{"id":"2","label":"[2] Filter [eq(ref_5, 'world')]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: eq(ref_0, 'hello'), eq(ref_5, 'world')"]},{"id":"1","label":"[1] Filter [eq(ref_0, 'hello')]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: eq(ref_0, 'hello')"]},{"id":"0","label":"[0] TableScan id: 1, num_columns: 10","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string"]},{"id":"6","label":"[6] Project ['hello', concat(ref_2, ref_4)]","annotations":["Num Columns: 2","Row Type: string, string","Pulled Up Predicates: raw_eq(ref_0, 'hello')"]}],"edges":[{"from":"5","to":"2","label":"input 0"},{"from":"2","to":"1","label":"input 0"},{"from":"1","to":"0","label":"input 0"},{"from":"6","to":"2","label":"input 0"},{"from":"5","to":"6","label":"ProjectNormalizationRule"}]}
step FilterMergeRule {"nodes":[{"id":"6","label":"[6] Project ['hello', concat(ref_2, ref_4)]","annotations":["Num Columns: 2","Row Type: string, string","Pulled Up Predicates: raw_eq(ref_0, 'hello')"]},{"id":"2","label":"[2] Filter [eq(ref_5, 'world')]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: eq(ref_0, 'hello'), eq(ref_5, 'world')"]},{"id":"1","label":"[1] Filter [eq(ref_0, 'hello')]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: eq(ref_0, 'hello')"]},{"id":"0","label":"[0] TableScan id: 1, num_columns: 10","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string"]},{"id":"7","label":"[7] Filter [eq(ref_5, 'world'), eq(ref_0, 'hello')]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: eq(ref_0, 'hello'), eq(ref_5, 'world')"]}],"edges":[{"from":"6","to":"2","label":"input 0"},{"from":"2","to":"1","label":"input 0"},{"from":"1","to":"0","label":"input 0"},{"from":"7","to":"0","label":"input 0"},{"from":"2","to":"7","label":"FilterMergeRule"}]}
final {"nodes":[{"id":"6","label":"[6] Project ['hello', concat(ref_2, ref_4)]","annotations":["Num Columns: 2","Row Type: string, string","Pulled Up Predicates: raw_eq(ref_0, 'hello')"]},{"id":"7","label":"[7] Filter [eq(ref_5, 'world'), eq(ref_0, 'hello')]","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string","Pulled Up Predicates: eq(ref_0, 'hello'), eq(ref_5, 'world')"]},{"id":"0","label":"[0] TableScan id: 1, num_columns: 10","annotations":["Num Columns: 10","Row Type: string, string, string, string, string, string, string, string, string, string"]}],"edges":[{"from":"6","to":"7","label":"input 0"},{"from":"7","to":"0","label":"input 0"}]}
----
----
