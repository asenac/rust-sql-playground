run
join_pruning_1
----
----
[4] Union
    - Num Columns: 2
    - Row Type: string, string
  [2] Project [ref_0, ref_18]
      - Num Columns: 2
      - Row Type: string, string
    [1] Join [eq(ref_4, ref_15)]
        - Num Columns: 20
        - Row Type: string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string
        - Pulled Up Predicates: eq(ref_4, ref_15)
      [0] TableScan id: 1, num_columns: 10
          - Num Columns: 10
          - Row Type: string, string, string, string, string, string, string, string, string, string
      Recurring node 0
  [3] Project [ref_3, ref_12]
      - Num Columns: 2
      - Row Type: string, string
    Recurring node 1


Optimized:
[4] Union
    - Num Columns: 2
    - Row Type: string, string
  [11] Project [ref_0, ref_5]
      - Num Columns: 2
      - Row Type: string, string
    [7] Join [eq(ref_2, ref_4)]
        - Num Columns: 6
        - Row Type: string, string, string, string, string, string
        - Pulled Up Predicates: eq(ref_2, ref_4)
      [5] Project [ref_0, ref_3, ref_4]
          - Num Columns: 3
          - Row Type: string, string, string
        [0] TableScan id: 1, num_columns: 10
            - Num Columns: 10
            - Row Type: string, string, string, string, string, string, string, string, string, string
      [6] Project [ref_2, ref_5, ref_8]
          - Num Columns: 3
          - Row Type: string, string, string
        Recurring node 0
  [12] Project [ref_1, ref_3]
      - Num Columns: 2
      - Row Type: string, string
    Recurring node 7
----
----

run
join_pruning_2
----
----
[6] Union
    - Num Columns: 2
    - Row Type: string, string
  [3] Project [ref_0, ref_18]
      - Num Columns: 2
      - Row Type: string, string
    [2] Filter [eq(ref_2, ref_16)]
        - Num Columns: 20
        - Row Type: string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string
        - Pulled Up Predicates: eq(ref_2, ref_16), eq(ref_4, ref_15)
      [1] Join [eq(ref_4, ref_15)]
          - Num Columns: 20
          - Row Type: string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string
          - Pulled Up Predicates: eq(ref_4, ref_15)
        [0] TableScan id: 1, num_columns: 10
            - Num Columns: 10
            - Row Type: string, string, string, string, string, string, string, string, string, string
        Recurring node 0
  [5] Project [ref_3, ref_12]
      - Num Columns: 2
      - Row Type: string, string
    [4] Filter [eq(ref_3, ref_15)]
        - Num Columns: 20
        - Row Type: string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string
        - Pulled Up Predicates: eq(ref_3, ref_15), eq(ref_4, ref_15)
      Recurring node 1


Optimized:
[6] Union
    - Num Columns: 2
    - Row Type: string, string
  [3] Project [ref_0, ref_18]
      - Num Columns: 2
      - Row Type: string, string
    [2] Filter [eq(ref_2, ref_16)]
        - Num Columns: 20
        - Row Type: string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string
        - Pulled Up Predicates: eq(ref_2, ref_16), eq(ref_4, ref_15)
      [1] Join [eq(ref_4, ref_15)]
          - Num Columns: 20
          - Row Type: string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string
          - Pulled Up Predicates: eq(ref_4, ref_15)
        [0] TableScan id: 1, num_columns: 10
            - Num Columns: 10
            - Row Type: string, string, string, string, string, string, string, string, string, string
        Recurring node 0
  [5] Project [ref_3, ref_12]
      - Num Columns: 2
      - Row Type: string, string
    [4] Filter [eq(ref_3, ref_15)]
        - Num Columns: 20
        - Row Type: string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string
        - Pulled Up Predicates: eq(ref_3, ref_15), eq(ref_4, ref_15)
      Recurring node 1
----
----
