run
two_rows
----
----
[2] Union
    - Num Columns: 0
    - Row Type: 
    - Keys: [key: [], lower_bound: 2, upper_bound: 2]
  [1] Aggregate key: []
      - Num Columns: 0
      - Row Type: 
      - Keys: [key: [], lower_bound: 1, upper_bound: 1]
    [0] TableScan id: 1, num_columns: 10
        - Num Columns: 10
        - Row Type: string, string, string, string, string, string, string, string, string, string
  Recurring node 1


Optimized:
[2] Union
    - Num Columns: 0
    - Row Type: 
    - Keys: [key: [], lower_bound: 2, upper_bound: 2]
  [4] Aggregate key: []
      - Num Columns: 0
      - Row Type: 
      - Keys: [key: [], lower_bound: 1, upper_bound: 1]
    [3] Project []
        - Num Columns: 0
        - Row Type: 
      [0] TableScan id: 1, num_columns: 10
          - Num Columns: 10
          - Row Type: string, string, string, string, string, string, string, string, string, string
  Recurring node 4
----
----

run
redundant_key
----
----
[2] Aggregate key: [ref_0, ref_1, ref_2]
    - Num Columns: 3
    - Row Type: string, string, string
    - Pulled Up Predicates: raw_eq(ref_1, concat(ref_0, ref_2))
    - Keys: [key: [ref_0, ref_1, ref_2], lower_bound: 0, upper_bound: 1]
  [1] Project [ref_0, concat(ref_0, ref_2), ref_2]
      - Num Columns: 3
      - Row Type: string, string, string
      - Pulled Up Predicates: raw_eq(ref_1, concat(ref_0, ref_2))
    [0] TableScan id: 1, num_columns: 10
        - Num Columns: 10
        - Row Type: string, string, string, string, string, string, string, string, string, string


Optimized:
[4] Project [ref_0, concat(ref_0, ref_1), ref_1]
    - Num Columns: 3
    - Row Type: string, string, string
    - Pulled Up Predicates: raw_eq(ref_1, concat(ref_0, ref_2))
    - Keys: [key: [ref_0, ref_2], lower_bound: 0, upper_bound: 1]
  [6] Aggregate key: [ref_0, ref_1]
      - Num Columns: 2
      - Row Type: string, string
      - Keys: [key: [ref_0, ref_1], lower_bound: 0, upper_bound: 1]
    [7] Project [ref_0, ref_2]
        - Num Columns: 2
        - Row Type: string, string
      [0] TableScan id: 1, num_columns: 10
          - Num Columns: 10
          - Row Type: string, string, string, string, string, string, string, string, string, string
----
----

run
redundant_key_2
----
----
[2] Aggregate key: [ref_0, ref_1, ref_2]
    - Num Columns: 3
    - Row Type: string, string, string
    - Pulled Up Predicates: raw_eq(ref_1, concat(ref_0, ref_2))
    - Keys: [key: [ref_0, ref_1, ref_2], lower_bound: 0, upper_bound: 1]
  [1] Project [ref_0, concat(ref_0, ref_2), ref_2, concat(ref_0, ref_2)]
      - Num Columns: 4
      - Row Type: string, string, string, string
      - Pulled Up Predicates: raw_eq(ref_1, ref_3), raw_eq(ref_1, concat(ref_0, ref_2)), raw_eq(ref_3, ref_1), raw_eq(ref_3, concat(ref_0, ref_2))
    [0] TableScan id: 1, num_columns: 10
        - Num Columns: 10
        - Row Type: string, string, string, string, string, string, string, string, string, string


Optimized:
[4] Project [ref_0, concat(ref_0, ref_1), ref_1]
    - Num Columns: 3
    - Row Type: string, string, string
    - Pulled Up Predicates: raw_eq(ref_1, concat(ref_0, ref_2))
    - Keys: [key: [ref_0, ref_2], lower_bound: 0, upper_bound: 1]
  [6] Aggregate key: [ref_0, ref_1]
      - Num Columns: 2
      - Row Type: string, string
      - Keys: [key: [ref_0, ref_1], lower_bound: 0, upper_bound: 1]
    [7] Project [ref_0, ref_2]
        - Num Columns: 2
        - Row Type: string, string
      [0] TableScan id: 1, num_columns: 10
          - Num Columns: 10
          - Row Type: string, string, string, string, string, string, string, string, string, string
----
----

run
redundant_key_3
----
----
[2] Aggregate key: [ref_0, ref_1, ref_2, ref_3]
    - Num Columns: 4
    - Row Type: string, string, string, string
    - Pulled Up Predicates: raw_eq(ref_1, ref_3), raw_eq(ref_1, concat(ref_0, ref_2)), raw_eq(ref_3, ref_1), raw_eq(ref_3, concat(ref_0, ref_2))
    - Keys: [key: [ref_0, ref_1, ref_2], lower_bound: 0, upper_bound: 1], [key: [ref_0, ref_1, ref_2, ref_3], lower_bound: 0, upper_bound: 1]
  [1] Project [ref_0, concat(ref_0, ref_2), ref_2, concat(ref_0, ref_2)]
      - Num Columns: 4
      - Row Type: string, string, string, string
      - Pulled Up Predicates: raw_eq(ref_1, ref_3), raw_eq(ref_1, concat(ref_0, ref_2)), raw_eq(ref_3, ref_1), raw_eq(ref_3, concat(ref_0, ref_2))
    [0] TableScan id: 1, num_columns: 10
        - Num Columns: 10
        - Row Type: string, string, string, string, string, string, string, string, string, string


Optimized:
[10] Project [ref_0, concat(ref_0, ref_1), ref_1, concat(ref_0, ref_1)]
    - Num Columns: 4
    - Row Type: string, string, string, string
    - Pulled Up Predicates: raw_eq(ref_1, ref_3), raw_eq(ref_1, concat(ref_0, ref_2)), raw_eq(ref_3, ref_1), raw_eq(ref_3, concat(ref_0, ref_2))
    - Keys: [key: [ref_0, ref_2], lower_bound: 0, upper_bound: 1]
  [8] Aggregate key: [ref_0, ref_1]
      - Num Columns: 2
      - Row Type: string, string
      - Keys: [key: [ref_0, ref_1], lower_bound: 0, upper_bound: 1]
    [9] Project [ref_0, ref_2]
        - Num Columns: 2
        - Row Type: string, string
      [0] TableScan id: 1, num_columns: 10
          - Num Columns: 10
          - Row Type: string, string, string, string, string, string, string, string, string, string
----
----

run
constant_key
----
----
[2] Aggregate key: [ref_0, ref_1, ref_2]
    - Num Columns: 3
    - Row Type: string, string, string
    - Pulled Up Predicates: raw_eq(ref_0, 'hello'), raw_eq(ref_1, 'world'), raw_eq(ref_2, 'bla')
    - Keys: [key: [], lower_bound: 0, upper_bound: 1], [key: [ref_0, ref_1, ref_2], lower_bound: 0, upper_bound: 1]
  [1] Project ['hello', 'world', 'bla']
      - Num Columns: 3
      - Row Type: string, string, string
      - Pulled Up Predicates: raw_eq(ref_0, 'hello'), raw_eq(ref_1, 'world'), raw_eq(ref_2, 'bla')
    [0] TableScan id: 1, num_columns: 10
        - Num Columns: 10
        - Row Type: string, string, string, string, string, string, string, string, string, string


Optimized:
[12] Project ['hello', 'world', 'bla']
    - Num Columns: 3
    - Row Type: string, string, string
    - Pulled Up Predicates: raw_eq(ref_0, 'hello'), raw_eq(ref_1, 'world'), raw_eq(ref_2, 'bla')
    - Keys: [key: [], lower_bound: 0, upper_bound: 1]
  [10] Aggregate key: [ref_0]
      - Num Columns: 1
      - Row Type: string
      - Pulled Up Predicates: raw_eq(ref_0, 'bla')
      - Keys: [key: [], lower_bound: 0, upper_bound: 1], [key: [ref_0], lower_bound: 0, upper_bound: 1]
    [11] Project ['bla']
        - Num Columns: 1
        - Row Type: string
        - Pulled Up Predicates: raw_eq(ref_0, 'bla')
      [0] TableScan id: 1, num_columns: 10
          - Num Columns: 10
          - Row Type: string, string, string, string, string, string, string, string, string, string
----
----

run
redundant_aggregate
----
----
[2] Aggregate key: [ref_0, ref_1, ref_2]
    - Num Columns: 3
    - Row Type: string, string, string
    - Keys: [key: [ref_0, ref_1, ref_2], lower_bound: 0, upper_bound: 1]
  [1] Aggregate key: [ref_0, ref_1, ref_2]
      - Num Columns: 3
      - Row Type: string, string, string
      - Keys: [key: [ref_0, ref_1, ref_2], lower_bound: 0, upper_bound: 1]
    [0] TableScan id: 1, num_columns: 10
        - Num Columns: 10
        - Row Type: string, string, string, string, string, string, string, string, string, string


Optimized:
[5] Aggregate key: [ref_0, ref_1, ref_2]
    - Num Columns: 3
    - Row Type: string, string, string
    - Keys: [key: [ref_0, ref_1, ref_2], lower_bound: 0, upper_bound: 1]
  [4] Project [ref_0, ref_1, ref_2]
      - Num Columns: 3
      - Row Type: string, string, string
    [0] TableScan id: 1, num_columns: 10
        - Num Columns: 10
        - Row Type: string, string, string, string, string, string, string, string, string, string
----
----

run
recurrent_node
----
----
[3] Union
    - Num Columns: 3
    - Row Type: string, string, string
    - Keys: [key: [ref_0, ref_1, ref_2], lower_bound: 0, upper_bound: 2]
  [1] Aggregate key: [ref_0, ref_1, ref_2]
      - Num Columns: 3
      - Row Type: string, string, string
      - Keys: [key: [ref_0, ref_1, ref_2], lower_bound: 0, upper_bound: 1]
    [0] TableScan id: 1, num_columns: 10
        - Num Columns: 10
        - Row Type: string, string, string, string, string, string, string, string, string, string
  [2] Filter [eq(ref_0, 'world')]
      - Num Columns: 3
      - Row Type: string, string, string
      - Pulled Up Predicates: eq(ref_0, 'world')
      - Keys: [key: [ref_0, ref_1, ref_2], lower_bound: 0, upper_bound: 1], [key: [ref_1, ref_2], lower_bound: 0, upper_bound: 1]
    Recurring node 1


Optimized:
[3] Union
    - Num Columns: 3
    - Row Type: string, string, string
    - Keys: [key: [ref_0, ref_1, ref_2], lower_bound: 0, upper_bound: 2]
  [5] Aggregate key: [ref_0, ref_1, ref_2]
      - Num Columns: 3
      - Row Type: string, string, string
      - Keys: [key: [ref_0, ref_1, ref_2], lower_bound: 0, upper_bound: 1]
    [4] Project [ref_0, ref_1, ref_2]
        - Num Columns: 3
        - Row Type: string, string, string
      [0] TableScan id: 1, num_columns: 10
          - Num Columns: 10
          - Row Type: string, string, string, string, string, string, string, string, string, string
  [2] Filter [eq(ref_0, 'world')]
      - Num Columns: 3
      - Row Type: string, string, string
      - Pulled Up Predicates: eq(ref_0, 'world')
      - Keys: [key: [ref_0, ref_1, ref_2], lower_bound: 0, upper_bound: 1], [key: [ref_1, ref_2], lower_bound: 0, upper_bound: 1]
    Recurring node 5
----
----
