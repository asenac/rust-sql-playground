run
join_pruning_1
----
----
[4] Union
    - Num Columns: 2
    - Row Type: string, string
  [2] Project [ref_0, ref_18]
      - Num Columns: 2
      - Row Type: string, string
    [1] Inner Join [eq(ref_4, ref_15)]
        - Num Columns: 20
        - Row Type: string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string
        - Pulled Up Predicates: eq(ref_4, ref_15)
      [0] TableScan id: 1, num_columns: 10
          - Num Columns: 10
          - Row Type: string, string, string, string, string, string, string, string, string, string
      Recurring node 0
  [3] Project [ref_3, ref_12]
      - Num Columns: 2
      - Row Type: string, string
    Recurring node 1


Optimized:
[4] Union
    - Num Columns: 2
    - Row Type: string, string
  [11] Project [ref_0, ref_5]
      - Num Columns: 2
      - Row Type: string, string
    [7] Inner Join [eq(ref_2, ref_4)]
        - Num Columns: 6
        - Row Type: string, string, string, string, string, string
        - Pulled Up Predicates: eq(ref_2, ref_4)
      [5] Project [ref_0, ref_3, ref_4]
          - Num Columns: 3
          - Row Type: string, string, string
        [0] TableScan id: 1, num_columns: 10
            - Num Columns: 10
            - Row Type: string, string, string, string, string, string, string, string, string, string
      [6] Project [ref_2, ref_5, ref_8]
          - Num Columns: 3
          - Row Type: string, string, string
        Recurring node 0
  [12] Project [ref_1, ref_3]
      - Num Columns: 2
      - Row Type: string, string
    Recurring node 7
----
----

run
join_pruning_2
----
----
[6] Union
    - Num Columns: 2
    - Row Type: string, string
  [3] Project [ref_0, ref_18]
      - Num Columns: 2
      - Row Type: string, string
    [2] Filter [eq(ref_2, ref_16)]
        - Num Columns: 20
        - Row Type: string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string
        - Pulled Up Predicates: eq(ref_2, ref_16), eq(ref_4, ref_15)
      [1] Inner Join [eq(ref_4, ref_15)]
          - Num Columns: 20
          - Row Type: string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string
          - Pulled Up Predicates: eq(ref_4, ref_15)
        [0] TableScan id: 1, num_columns: 10
            - Num Columns: 10
            - Row Type: string, string, string, string, string, string, string, string, string, string
        Recurring node 0
  [5] Project [ref_3, ref_12]
      - Num Columns: 2
      - Row Type: string, string
    [4] Filter [eq(ref_3, ref_15)]
        - Num Columns: 20
        - Row Type: string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string
        - Pulled Up Predicates: eq(ref_3, ref_15), eq(ref_4, ref_15)
      Recurring node 1


Optimized:
[6] Union
    - Num Columns: 2
    - Row Type: string, string
  [22] Project [ref_0, ref_7]
      - Num Columns: 2
      - Row Type: string, string
    [15] Filter [eq(ref_1, ref_6)]
        - Num Columns: 8
        - Row Type: string, string, string, string, string, string, string, string
        - Pulled Up Predicates: eq(ref_1, ref_6), eq(ref_3, ref_5)
      [9] Inner Join [eq(ref_3, ref_5)]
          - Num Columns: 8
          - Row Type: string, string, string, string, string, string, string, string
          - Pulled Up Predicates: eq(ref_3, ref_5)
        [7] Project [ref_0, ref_2, ref_3, ref_4]
            - Num Columns: 4
            - Row Type: string, string, string, string
          [0] TableScan id: 1, num_columns: 10
              - Num Columns: 10
              - Row Type: string, string, string, string, string, string, string, string, string, string
        [8] Project [ref_2, ref_5, ref_6, ref_8]
            - Num Columns: 4
            - Row Type: string, string, string, string
          Recurring node 0
  [23] Project [ref_2, ref_4]
      - Num Columns: 2
      - Row Type: string, string
    [21] Filter [eq(ref_2, ref_3)]
        - Num Columns: 8
        - Row Type: string, string, string, string, string, string, string, string
        - Pulled Up Predicates: eq(ref_2, ref_3), eq(ref_3, ref_5)
      Recurring node 9
----
----

run
join_pruning_3
----
----
[6] Union
    - Num Columns: 2
    - Row Type: string, string
    - Keys: [key: [ref_0, ref_1], lower_bound: 0, upper_bound: 2]
  [4] Aggregate key: [ref_0, ref_1], aggregates: []
      - Num Columns: 2
      - Row Type: string, string
      - Keys: [key: [ref_0, ref_1], lower_bound: 0, upper_bound: 1]
    [3] Filter [eq(ref_2, ref_1)]
        - Num Columns: 9
        - Row Type: string, string, string, string, string, string, string, string, string
        - Pulled Up Predicates: eq(ref_0, ref_4), eq(ref_2, ref_1)
      [2] Inner Join [eq(ref_0, ref_4)]
          - Num Columns: 9
          - Row Type: string, string, string, string, string, string, string, string, string
          - Pulled Up Predicates: eq(ref_0, ref_4)
        [0] TableScan id: 1, num_columns: 4
            - Num Columns: 4
            - Row Type: string, string, string, string
        [1] TableScan id: 1, num_columns: 5
            - Num Columns: 5
            - Row Type: string, string, string, string, string
  [5] Aggregate key: [ref_2, ref_5], aggregates: []
      - Num Columns: 2
      - Row Type: string, string
      - Keys: [key: [ref_0, ref_1], lower_bound: 0, upper_bound: 1]
    Recurring node 2


Optimized:
[6] Union
    - Num Columns: 2
    - Row Type: string, string
    - Keys: [key: [ref_0, ref_1], lower_bound: 0, upper_bound: 2]
  [8] Aggregate key: [ref_0, ref_1], aggregates: []
      - Num Columns: 2
      - Row Type: string, string
      - Keys: [key: [ref_0, ref_1], lower_bound: 0, upper_bound: 1]
    [22] Project [ref_0, ref_1]
        - Num Columns: 2
        - Row Type: string, string
      [16] Filter [eq(ref_2, ref_1)]
          - Num Columns: 5
          - Row Type: string, string, string, string, string
          - Pulled Up Predicates: eq(ref_0, ref_3), eq(ref_2, ref_1)
        [11] Inner Join [eq(ref_0, ref_3)]
            - Num Columns: 5
            - Row Type: string, string, string, string, string
            - Pulled Up Predicates: eq(ref_0, ref_3)
          [9] Project [ref_0, ref_1, ref_2]
              - Num Columns: 3
              - Row Type: string, string, string
            [0] TableScan id: 1, num_columns: 4
                - Num Columns: 4
                - Row Type: string, string, string, string
          [10] Project [ref_0, ref_1]
              - Num Columns: 2
              - Row Type: string, string
            [1] TableScan id: 1, num_columns: 5
                - Num Columns: 5
                - Row Type: string, string, string, string, string
  [20] Aggregate key: [ref_0, ref_1], aggregates: []
      - Num Columns: 2
      - Row Type: string, string
      - Keys: [key: [ref_0, ref_1], lower_bound: 0, upper_bound: 1]
    [21] Project [ref_2, ref_4]
        - Num Columns: 2
        - Row Type: string, string
      Recurring node 11
----
----

run rules=JoinPruningRule
join_pruning_3
----
----
[6] Union
    - Num Columns: 2
    - Row Type: string, string
    - Keys: [key: [ref_0, ref_1], lower_bound: 0, upper_bound: 2]
  [4] Aggregate key: [ref_0, ref_1], aggregates: []
      - Num Columns: 2
      - Row Type: string, string
      - Keys: [key: [ref_0, ref_1], lower_bound: 0, upper_bound: 1]
    [3] Filter [eq(ref_2, ref_1)]
        - Num Columns: 9
        - Row Type: string, string, string, string, string, string, string, string, string
        - Pulled Up Predicates: eq(ref_0, ref_4), eq(ref_2, ref_1)
      [2] Inner Join [eq(ref_0, ref_4)]
          - Num Columns: 9
          - Row Type: string, string, string, string, string, string, string, string, string
          - Pulled Up Predicates: eq(ref_0, ref_4)
        [0] TableScan id: 1, num_columns: 4
            - Num Columns: 4
            - Row Type: string, string, string, string
        [1] TableScan id: 1, num_columns: 5
            - Num Columns: 5
            - Row Type: string, string, string, string, string
  [5] Aggregate key: [ref_2, ref_5], aggregates: []
      - Num Columns: 2
      - Row Type: string, string
      - Keys: [key: [ref_0, ref_1], lower_bound: 0, upper_bound: 1]
    Recurring node 2


Optimized:
[6] Union
    - Num Columns: 2
    - Row Type: string, string
    - Keys: [key: [ref_0, ref_1], lower_bound: 0, upper_bound: 2]
  [12] Aggregate key: [ref_0, ref_1], aggregates: []
      - Num Columns: 2
      - Row Type: string, string
      - Keys: [key: [ref_0, ref_1], lower_bound: 0, upper_bound: 1]
    [11] Filter [eq(ref_2, ref_1)]
        - Num Columns: 4
        - Row Type: string, string, string, string
        - Pulled Up Predicates: eq(ref_2, ref_1)
      [10] Project [ref_0, ref_1, ref_2, ref_4]
          - Num Columns: 4
          - Row Type: string, string, string, string
        [9] Inner Join [eq(ref_0, ref_3)]
            - Num Columns: 5
            - Row Type: string, string, string, string, string
            - Pulled Up Predicates: eq(ref_0, ref_3)
          [7] Project [ref_0, ref_1, ref_2]
              - Num Columns: 3
              - Row Type: string, string, string
            [0] TableScan id: 1, num_columns: 4
                - Num Columns: 4
                - Row Type: string, string, string, string
          [8] Project [ref_0, ref_1]
              - Num Columns: 2
              - Row Type: string, string
            [1] TableScan id: 1, num_columns: 5
                - Num Columns: 5
                - Row Type: string, string, string, string, string
  [13] Aggregate key: [ref_2, ref_3], aggregates: []
      - Num Columns: 2
      - Row Type: string, string
      - Keys: [key: [ref_0, ref_1], lower_bound: 0, upper_bound: 1]
    Recurring node 10
----
----
